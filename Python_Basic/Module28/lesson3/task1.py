# Примечание: Обращаем внимание на то, что абстрактный метод обязательно должен быть переопределён в дочернем классе!
# Например, если попытаться создать объект Rectangle из самого последнего примера урока, то Питон также выдаст ошибку,
# так как метод move не переопределён в классе Rectangle.
#
# Задача 1. Транспорт
#
# У нас есть парк транспорта. У каждого транспорта есть цвет и скорость, и каждый умеет двигаться и подавать сигнал.
# В парке транспорта стоят:
#
# Автомобили. Они могут ездить только по земле.
# Лодки. Ездят только по воде.
# Амфибии. Могут перемещаться и по земле, и по воде.
# Напишите код, который реализует соответствующие классы и методы. Класс «Транспорт» должен быть абстрактным
# и содержать абстрактные методы.
#
# Также добавьте класс-примесь, в котором реализован функционал проигрывания музыки. «Замешайте» этот класс в «Амфибию»


from abc import ABC, abstractmethod


class Transport(ABC):
    def __init__(self, color: str, speed: int) -> None:
        self.color = color
        self.speed = speed

    @abstractmethod
    def move(self):
        print('Транспорт двигается')

    def signal(self):
        print('Бииип')


class MusicMixin(ABC):
    def listen_to_music(self):
        print('Слушаем музыку')


class Car(Transport):
    def move(self):
        print('Автомобиль двигается по земле')


class Boat(Transport):
    def move(self):
        print('Лодка двигается по морю')


class Amphibian(Transport, MusicMixin):
    def move(self):
        print('Амфибия двигается по земле и морю')


x = Amphibian('red', 50)
x.listen_to_music()
