# Задача 1. Счётчик 2
#
# Как-то мы уже создавали декоратор counter, который считает и выводит количество вызовов декорируемой функции.
# Для этого мы использовали интересную особенность классов.
# В этот раз реализуйте тот же декоратор, но уже с использованием знаний о локальных и глобальных переменных.
#
#
#
# Реализуйте декоратор двумя способами:
#
# используя глобальную переменную count;
# используя локальную переменную count внутри декоратора.
#
#
# Дополнительно: найдите команду (в интернете или даже сами), которая перечисляет все функции и методы,
# находящиеся во встроенном пространстве имён в Python.
#
#
#
# Результат выполнения команды:
#
# ['__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__'  ну и так далее.
import functools

# count = 0

def counter(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # global count
        nonlocal count
        count += 1
        print(count)
        return func(*args, **kwargs)
    count = 0

    return wrapper


@counter
def some_func():
    print('Что-то происходит')


some_func()
some_func()